# frozen_string_literal: true

module Fastlane
  module Actions
    class DownloadAssetFromGithubReleaseAction < Action
      def self.run(params)
        require "open-uri"
        require "fileutils"
        require "base64"
        require "down/net_http"

        asset_url = params.fetch(:asset_url)
        destination_path = params.fetch(:destination_path)

        api_token = params[:api_token]
        api_bearer = params[:api_bearer]

        download_asset_from_release(api_token, api_bearer, asset_url, destination_path)
      end

      #####################################################
      # @!group support functions
      #####################################################

      def self.download_asset_from_release(api_token, api_bearer, asset_url, destination_path)
        UI.important("Downloading #{asset_url} to #{destination_path}... Extra long line so rubocop complains, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah")

        begin
          prepare_destination_path(destination_path)

          Down::NetHttp.download(
            asset_url,
            destination: destination_path,
            headers: construct_headers(api_token, api_bearer),
            max_redirects: 5,
            content_length_proc: ->(content_length) {
              UI.message("Asset size: #{format("%.2f", content_length.to_f / 2**20)} MiB")
            },
          )

          UI.success("Asset downloaded!")
        rescue
          UI.crash!("Asset could not be downloaded")
        end
      end

      def self.prepare_destination_path(destination_path)
        dirname = File.dirname(destination_path)
        unless File.directory?(dirname)
          FileUtils.mkdir_p(dirname)
        end
      end

      def self.construct_headers(api_token, api_bearer)
        headers = { "User-Agent" => "fastlane-github_api" }
        headers["Accept"] = "application/octet-stream"
        headers["Authorization"] = "Basic #{Base64.strict_encode64(api_token)}" if api_token
        headers["Authorization"] = "Bearer #{api_bearer}" if api_bearer

        headers
      end

      #####################################################
      # @!group Documentation
      #####################################################

      def self.description
        "Downloads assets from an existing GitHub release's asset URL"
      end

      def self.details
        "The action downloads assets from an existing GitHub release's asset URL.\n"\
          "You can obtain the URL of an asset file by scanning the result of `get_github_release`"
      end

      def self.available_options
        [
          FastlaneCore::ConfigItem.new(
            key: :asset_url,
            env_name: "FL_DOWNLOAD_ASSET_FROM_GITHUB_RELEASE_ASSET_URL",
            description: "Asset URL to download from. Get it from `get_github_release` response, for example",
            type: String,
          ),
          FastlaneCore::ConfigItem.new(
            key: :destination_path,
            env_name: "FL_DOWNLOAD_ASSET_FROM_GITHUB_RELEASE_DESTINATION_PATH",
            description: "Path of the file where the download would be saved",
            type: String,
          ),
          FastlaneCore::ConfigItem.new(
            key: :api_token,
            env_name: "FL_DOWNLOAD_ASSET_FROM_GITHUB_RELEASE_API_TOKEN",
            sensitive: true,
            code_gen_sensitive: true,
            default_value: ENV["GITHUB_API_TOKEN"],
            default_value_dynamic: true,
            description: "GitHub Personal Token (required for private repositories)",
            conflicting_options: [:api_bearer],
            optional: true,
          ),
          FastlaneCore::ConfigItem.new(
            key: :api_bearer,
            env_name: "FL_DOWNLOAD_ASSET_FROM_GITHUB_RELEASE_API_BEARER",
            sensitive: true,
            code_gen_sensitive: true,
            description: "Use a Bearer authorization token. Usually generated by Github Apps, e.g. GitHub Actions GITHUB_TOKEN "\
              " environment variable",
            conflicting_options: [:api_token],
            optional: true,
            default_value: nil,
          ),
        ]
      end

      def self.authors
        ["adriangl"]
      end

      def self.is_supported?(platform)
        [:ios, :mac, :android].include?(platform)
      end

      def self.category
        # Check https://github.com/fastlane/fastlane/blob/0d1aa50045d57975d8b9e5d5f1f489d82ee0f437/fastlane/lib/fastlane/action.rb#L6
        # for available categories
        :source_control
      end
    end
  end
end
